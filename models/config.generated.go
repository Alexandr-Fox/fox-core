// Code generated by go generate; DO NOT EDIT.
package models

import (
	"errors"
	"fmt"
	"github.com/Alexandr-Fox/fox-core/consts"
	"github.com/Alexandr-Fox/fox-core/database"
)

func NewConfig() *Config {
	return &Config{}
}

func (c *Config) Create() error {
	return database.GetCoreDB().Create(c).Error
}

func (c *Config) Delete() error {
	return database.GetCoreDB().Delete(&c, fmt.Sprintf(consts.QueryEqOne, consts.FieldID), c.ID).Error
}

func (c *Config) Find(name string, value interface{}) (cs []Config, err error) {
	if err = database.GetCoreDB().Where(fmt.Sprintf(consts.QueryEqOne, name), value).Find(&cs).Error; err != nil {
		return nil, err
	}

	return cs, nil
}

func (c *Config) First(name string, value interface{}) error {
	if err := database.GetCoreDB().Where(fmt.Sprintf(consts.QueryEqOne, name), value).First(&c).Error; err != nil {
		return err
	}

	return nil
}

func (c *Config) Load(query ...database.LoadQuery) (cs []Config, err error) {
	if len(query) > 1 {
		return []Config{}, errors.New(consts.ErrorArgumentsCount)
	}

	qb := database.GetCoreDB().Model(&c)

	if len(query) > 0 {
		for _, v := range query[0].Preload {
			qb = qb.Preload(v)
		}

		query, values := database.ParseQuery(query[0].Filter)
		qb = qb.Where(query, values...)
	}

	err = qb.Find(&cs).Error

	return cs, err
}
