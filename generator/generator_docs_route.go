// generator/generator_routers_rest.go
package main

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"log"
	"os"
	"strings"
	"text/template"
	"unicode"
)

const outputDocsControllers = "internal/controllers/app.generated.go"

func toLowerCamel(s string) string {
	if s == "" {
		return ""
	}
	runes := []rune(s)
	runes[0] = unicode.ToLower(runes[0])
	return string(runes)
}

type DocsController struct {
	Route    string
	OnlyPost bool
}

func main() {
	fset := token.NewFileSet()
	controllersPath := "internal/controllers"

	pkgs, err := parser.ParseDir(fset, controllersPath, nil, parser.ParseComments)
	if err != nil {
		log.Fatal("Ошибка парсинга пакета controllers: ", err)
	}

	var controllers []DocsController

	for _, pkg := range pkgs {
		for fileName, file := range pkg.Files {
			if !strings.HasSuffix(fileName, ".go") || strings.HasSuffix(fileName, "_test.go") || strings.HasSuffix(fileName, ".generated.go") {
				continue
			}

			ast.Inspect(file, func(n ast.Node) bool {
				typeSpec, ok := n.(*ast.TypeSpec)
				if !ok || typeSpec.Type == nil {
					return true
				}

				_, ok = typeSpec.Type.(*ast.StructType)
				if !ok {
					return true
				}

				modelName := typeSpec.Name.Name

				if strings.HasPrefix(modelName, "_") {
					fmt.Printf("⚠️ Пропускаем генерацию для структуры %s из-за префикса\n", modelName)
					return true
				}
				commentMap := ast.NewCommentMap(fset, file, file.Comments)

				// Проверим методы
				for _, method := range pkg.Files[fileName].Decls {
					fn, ok := method.(*ast.FuncDecl)
					if !ok || fn.Recv == nil || fn.Recv.List == nil {
						continue
					}

					// Проверим, что метод принадлежит этой структуре
					recv := fn.Recv.List[0].Type
					var recvName string
					switch t := recv.(type) {
					case *ast.Ident:
						recvName = t.Name
					case *ast.StarExpr:
						if ident, ok := t.X.(*ast.Ident); ok {
							recvName = ident.Name
						}
					}

					if recvName != modelName {
						continue
					}

					onlyPost := false
					if comments := commentMap[method]; len(comments) > 0 {
						for _, group := range comments {
							for _, comment := range group.List {
								text := comment.Text
								// Убираем префиксы // или /* */
								if strings.HasPrefix(text, "//") {
									tagLine := strings.TrimSpace(strings.TrimPrefix(text, "//"))
									if strings.HasPrefix(tagLine, "@rpc") || strings.HasPrefix(tagLine, "+") || strings.HasPrefix(tagLine, "-") {
										if strings.HasSuffix(tagLine, "+onlyPost") || strings.HasSuffix(tagLine, ":onlyPost") {
											onlyPost = true
										} else if strings.HasSuffix(tagLine, "-onlyPost") {
											onlyPost = false
										}
									}
								}
							}
						}
					}

					controllers = append(controllers, DocsController{
						Route:    fmt.Sprintf("%s.%s", toLowerCamel(modelName), toLowerCamel(fn.Name.Name)),
						OnlyPost: onlyPost,
					})
				}

				return true
			})
		}
	}

	if len(controllers) == 0 {
		log.Println("Не найдено контроллеров. Генерация пустого файла.")
	}

	// Генерация кода
	err = generateDocsControllersRoutes(controllers)
	if err != nil {
		log.Fatal("Ошибка генерации файла: ", err)
	}

	fmt.Println("✅ Сгенерирован:", outputDocsControllers)
}

func generateDocsControllersRoutes(controllers []DocsController) error {
	tmpl := `// Code generated by go generate; DO NOT EDIT.
package controllers

import (
    "github.com/gofiber/fiber/v2"
)

// Methods регистрирует все REST-роуты для всех моделей
func (app *App) Methods(ctx *fiber.Ctx) error {
	return ctx.JSON([]string{
		{{range $r := .}}"POST {{$r.Route}}",{{if not $r.OnlyPost}}"GET {{$r.Route}}",{{end}}
		{{end}}
	})
}
`

	t, err := template.New("docsControllers").Parse(tmpl)
	if err != nil {
		return err
	}

	file, err := os.Create(outputDocsControllers)
	if err != nil {
		return err
	}
	defer file.Close()

	return t.Execute(file, controllers)
}
